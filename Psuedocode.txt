FIND A REFERENCE FOR THIS
(one of the wiki references??)

    # Deep Q-Learning Algorithm
    #
    # Initialise replayActions (D)
    # Initialise action-value table Q with random weights
    #
    # observe initial state (s)
    #
    # repeat
    #   select an action (a)
    #       with a probability of G? select a random action (a)
    #       OR select
    #   do action (a)
    #   observe reward (r)
    #   observe new state (s')
    #   store <s, a, r, s'> in replayActions (D)
    #
    #   sample random transitions <ss, aa, rr, ss'> from replayActions (D)
    #   calculate target for each minibatch transition (tt)
    #       if ss' is terminal state then tt = rr
    #       otherwise tt = rr + ymax a' Q(ss', aa,)
    #   train the Q network using (tt - Q(ss, aa)) as loss
    #
    #   s=s'
    #
    # until terminated



# References

* Solving the Hunter-Prey problem as a single-agent problem [Anson Wong](https://towardsdatascience.com/solving-the-hunter-prey-problem-as-a-single-agent-problem-using-relative-coordinates-31c3b1daf441) |  [Github](https://github.com/ankonzoid/Deep-Reinforcement-Learning-Tutorials/tree/master/hunterprey)

* A collection of Deep Reinforcement Learning algorithms implemented in tensorflow. Very extensible. High performing DQN implementation. Carles Gelada | [Github](https://github.com/cgel/DRL)

* Simple Reinforcement Learning with Tensorflow: Part 0 - Q-Tables [Arthur Juliani](https://medium.com/emergent-future/simple-reinforcement-learning-with-tensorflow-part-0-q-learning-with-tables-and-neural-networks-d195264329d0) | [Github](https://github.com/awjuliani/DeepRL-Agents/blob/master/Q-Table.ipynb)

* Simple Reinforcement Learning with Tensorflow Part 4: Deep Q-Networks and Beyond  [Arthur Juliani](https://medium.com/@awjuliani/simple-reinforcement-learning-with-tensorflow-part-4-deep-q-networks-and-beyond-8438a3e2b8df) | [Github](https://github.com/awjuliani/DeepRL-Agents/blob/master/Q-Exploration.ipynb)
